!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(NAME)	Makefile	/^$(NAME): ${INC_H}$/;"	t
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror -g3 -fsanitize=address -lreadline$/;"	m
DYNARRAY_H	includes/dynarray.h	/^# define DYNARRAY_H$/;"	d
INC	Makefile	/^INC = dynarray.h minishell.h$/;"	m
INC_D	Makefile	/^INC_D = includes$/;"	m
INC_H	Makefile	/^INC_H = $(addprefix ${INC_D}\/, ${INC})$/;"	m
NAME	Makefile	/^NAME = minishell$/;"	m
SRC	Makefile	/^SRC	=	dynarray2.c dynarray.c minishell.c ft_str.c ft_mems.c$/;"	m
SRC_C	Makefile	/^SRC_C = $(addprefix ${SRC_D}\/, ${SRC})$/;"	m
SRC_D	Makefile	/^SRC_D = srcs$/;"	m
all	Makefile	/^all: $(NAME)$/;"	t
byte_size	includes/dynarray.h	/^	uint64_t	byte_size;$/;"	m	struct:s_dynarray	typeref:typename:uint64_t
cell_size	includes/dynarray.h	/^	size_t		cell_size;$/;"	m	struct:s_dynarray	typeref:typename:size_t
clean	Makefile	/^clean:$/;"	t
clear_dynarray	srcs/dynarray.c	/^void	clear_dynarray(t_dynarray *dynarray)$/;"	f	typeref:typename:void
dyn_insr	srcs/dynarray2.c	/^int	dyn_insr(t_dynarray *darr, void *ncells, uint64_t index, uint64_t nb_ncells)$/;"	f	typeref:typename:int
dynacc	srcs/dynarray2.c	/^void	*dynacc(t_dynarray *darr, uint64_t index)$/;"	f	typeref:typename:void *
dynarray_realloc	srcs/dynarray2.c	/^int	dynarray_realloc(t_dynarray *dynarray, size_t new_byte_size)$/;"	f	typeref:typename:int
fclean	Makefile	/^fclean: clean$/;"	t
free_dynarray	srcs/dynarray.c	/^void	free_dynarray(t_dynarray *dynarray)$/;"	f	typeref:typename:void
ft_env	srcs/ft_commands.c	/^void	ft_env(char **envp)$/;"	f	typeref:typename:void
ft_get_dir	srcs/minishell.c	/^char	*ft_get_dir(char *path)$/;"	f	typeref:typename:char *
ft_make_prompt	srcs/minishell.c	/^char	*ft_make_prompt(char *dir)$/;"	f	typeref:typename:char *
ft_memcpy	srcs/ft_mems.c	/^void	ft_memcpy(void *dest, void *src, size_t len)$/;"	f	typeref:typename:void
ft_memset	srcs/ft_mems.c	/^void	ft_memset(void *mem, size_t size)$/;"	f	typeref:typename:void
ft_strcmp	srcs/ft_str.c	/^int	ft_strcmp(char *str, char *str2)$/;"	f	typeref:typename:int
ft_strcpy	srcs/ft_str.c	/^int	ft_strcpy(char *str, char *str2)$/;"	f	typeref:typename:int
ft_strlen	srcs/ft_str.c	/^int	ft_strlen(char *str)$/;"	f	typeref:typename:int
ft_unset	srcs/ft_commands.c	/^int	ft_unset(char *str, char **envp, t_dynarray *darr)$/;"	f	typeref:typename:int
init_dynarray	srcs/dynarray.c	/^int	init_dynarray(t_dynarray *dynarray, uint64_t nb_cells, size_t cell_size)$/;"	f	typeref:typename:int
list	includes/dynarray.h	/^	void		*list;$/;"	m	struct:s_dynarray	typeref:typename:void *
main	srcs/minishell.c	/^int	main(int ac, char **argv, char **envp)$/;"	f	typeref:typename:int
nb_cells	includes/dynarray.h	/^	uint64_t	nb_cells;$/;"	m	struct:s_dynarray	typeref:typename:uint64_t
pop_dynarray	srcs/dynarray.c	/^int	pop_dynarray(t_dynarray *dynarray, uint64_t nb_cells_pop, bool way)$/;"	f	typeref:typename:int
push_dynarray	srcs/dynarray.c	/^int	push_dynarray(t_dynarray *darr, void *new_cells, uint64_t nb_ncells,$/;"	f	typeref:typename:int
re	Makefile	/^re: fclean all$/;"	t
s_dynarray	includes/dynarray.h	/^typedef struct s_dynarray$/;"	s
t_dynarray	includes/dynarray.h	/^}				t_dynarray;$/;"	t	typeref:struct:s_dynarray
tmp	includes/dynarray.h	/^	void		*tmp;$/;"	m	struct:s_dynarray	typeref:typename:void *
